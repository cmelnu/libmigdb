$Log$
Revision 1.17  2004/08/25 20:49:52  set
* Modified: mi_error reset to MI_OK when connecting.
* Modified: MIDebugger::TargetUnselect() to detach only if remote/pid is
stopped.
* Added: execute until address is reached (we had file:line only).

Revision 1.16  2004/08/24 21:10:21  set
* Modified: PID targets starts stopped.
* Fixed: When debugging an attached process if gdb dies we failed to go to
disconnected.

Revision 1.15  2004/08/23 23:45:23  set
* Added: Mechanism to disable psym workarounds. The mechanism allows to
enable/disable workarounds in a simple and compatible way.
* Added: Mechanism to force MI version.
* Added: Enabled a couple of MI v2 things when the version is forced to 2+.
* Added: BreakAfter(mi_bkpt *b) C++ wrapper.

Revision 1.14  2004/08/17 20:40:11  set
* Added: Disassembler functionality.

Revision 1.13  2004/08/13 20:36:08  set
* Modified: The mechanism to set gdb and xterm binaries. Now you can get
the actual default (it searches in PATH) and set a new value that's copied.
* Added: Functions to set the "main" function.
* Added: Time out callback to catch time-outs in gdb response.
* Added: Mechanism to detect gdb died and go to disconnected state. We
already found an operation that makes gdb die.

Revision 1.12  2004/08/12 21:21:43  set
* Added: Command to get info about the threads. It uses a partially
implemented gdb functionality.

Revision 1.11  2004/08/09 12:58:23  set
* Updated: version and reference to release 0.8.3.

Revision 1.10  2004/08/08 23:07:00  set
* Added: A function to know the endian of the target.
* Added: A workaround to another bug in gdb: responses like the endian and
architecture are sent to the console and not to the result record. So now
the -gdb-show command traps the console (a copy) and if the RR have no info
and we got something in the console that's returned.

Revision 1.9  2004/08/06 20:59:44  set
* Fixed: The gdb dialog was amazingly slow. It was just the fact that I
trusted in the non-blocking flag and sleep, but this annoys the scheduler
and the solution is to just use select, which is the Right Thing To Do (TM)
;-)
* Modified: MIDebugger::EvalExpression now takes a const char * and cleans
the error number before executing.
* Added: Some very restricted function to read memory content.

Revision 1.8  2004/08/04 20:07:31  set
* Modified: The mi_gvar structure to be able to hold a tree of variables.
* Fixed: mi_error_from_gdb not released at exit.
* Fixed: leak in Kill()
* Fixed/Added: Various details of the GNU vars code.

Revision 1.7  2004/08/01 00:16:13  set
* Added: More fields to the mi_wp structure, useful for the frontend.
* Fixed: Watchpoint expressions must be enclosed using "" to avoid
problems.
* Fixed: wp_mode name to mi_wp_mode.
* Added: int MIDebugger::WatchDelete(mi_wp *w).
* Fixed: sr_wp_scope doesn't report a full wp, just the number.

Revision 1.6  2004/07/30 21:17:08  set
* Added: More workarounds to gdb bugs. I fille the cli/1725, gdb/1726 and
gdb/1727 bug reports. I hope they get fixed :-(

Revision 1.5  2004/07/28 21:09:40  set
* Fixed: Some mess in the bkpts structure. The "times" field is how many
times we hit a breakpoint, just information. The real value is "ignore".
* Fixed: Missing parse of the "cond" field for breakpoints.
* Added: A C++ function to set a breakpoint from a mi_bkpt structure. It
supports the four modes to specify a location.

Revision 1.4  2004/07/25 22:58:07  set
* Added: More fields to the mi_bkpt structure.

Revision 1.3  2004/07/21 19:43:39  set
* Added: A workaround to a bug in gdb: the two stages load of symtabs
(using partial ones) is not reliable (fails to find the symtab in some
cases). So now we force the load with "readnow".
* Fixed: Lack of string.h in examples/target_frames.cc. Reported by Thiago.

Revision 1.2  2004/07/20 23:42:56  set
* Fixed: directory in compressed sources.

Revision 1.1  2004/07/20 20:38:42  set
* Added: C++ wrapper to attach to a running process. Also modified the low
level function to return the current frame.
* Modified: Now if we get an error while the state is running we assume the
previous "running" was wrong and we are in fact stopped. Until now I saw
two cases where gdb says we are running and then shows an error.

